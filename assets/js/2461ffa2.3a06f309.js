(self.webpackChunk_parsed_path_docs=self.webpackChunk_parsed_path_docs||[]).push([[600],{59043:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return h},default:function(){return m}});var a=n(7560),r=n(98283),p=n(2784),s=n(30876),o=n(82894),i=n(54304),d=["components"],c={sidebar_position:3,sidebar_label:"API References"},l={unversionedId:"api",id:"api",isDocsHomePage:!1,title:"API References",description:"Parsed",source:"@site/docs/api.mdx",sourceDirName:".",slug:"/api",permalink:"/parsed-path/docs/api",editUrl:"https://github.com/tseijp/parsed-path/edit/master/examples/docs/docs/api.mdx",version:"current",sidebar_label:"API References",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"API References"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/parsed-path/docs/get"}},h=[{value:"Parsed",id:"parsed",children:[]},{value:"Adapting based on props",id:"adapting-based-on-props",children:[]},{value:"Extending parses",id:"extending-parses",children:[]},{value:"Parsing any pathname",id:"parsing-any-pathname",children:[]},{value:"Attaching additional props",id:"attaching-additional-props",children:[]}],u={toc:h};function m(t){var e=t.components,n=(0,r.Z)(t,d);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"parsed"},"Parsed"),(0,s.kt)("p",null,"This is the default export. We use to create the parsed.tag helper method.\nReturn a function that accepts a tagged template literal and turns it into a pathname."),(0,s.kt)(i.v.Card,{scope:{parsed:o.ZP,React:p},code:"\nconst Api = parsed.https`tsei.jp``api``v${props => props.version}`;\nrender(\n  <>\n    v1: <Api version={1}/>\n    <br/>\n    v2: <Api version={2}/>\n  </>\n);\n".trim()}),(0,s.kt)("h3",{id:"adapting-based-on-props"},"Adapting based on props"),(0,s.kt)("p",null,"You can pass a function to a parsed path's template literal to adapt it based on its props.\nWhen setting the next prop to true, we are switching its version number."),(0,s.kt)(i.v.Card,{scope:{parsed:o.ZP,React:p},code:'\nconst Api = parsed`api``v${props => props.next? 2: 1}`;\nconst Get = Api`${props =>\n  props.version === 1\n    ? "get/is/undefined"\n    : "get"\n}`;\nrender(\n  <>\n    Apt: <Api/>\n    <br/>\n    Get: <Get/>\n    <br/>\n    Api next: <Api next/>\n    <br/>\n    Get next: <Get next/>\n  </>\n);\n'.trim()}),(0,s.kt)("h3",{id:"extending-parses"},"Extending parses"),(0,s.kt)("p",null,"To easily make a new pathname that inherits from another paths.\nHere we use the api url from the last section and create a special one."),(0,s.kt)(i.v.Card,{scope:{React:p,parsed:o.ZP},code:"\nconst Api = parsed.http`tsei.jp``api`;\nconst Dev = Api`\n  root: localhost;\n  port: 3000;\n`;\nrender(\n  <>\n    Api: <Api/>\n    <br/>\n    Dev: <Dev/>\n  </>\n);\n".trim()}),(0,s.kt)("h3",{id:"parsing-any-pathname"},"Parsing any pathname"),(0,s.kt)("p",null,"The parsed method works perfectly on all of your own or any third-party pathname."),(0,s.kt)(i.v.Card,{scope:{React:p,parsed:o.ZP},code:'\nconst Url = new URL("https://localhost:3000/");\nconst Api = parsed(Url)`\n  port: 3001;\n  root: http://;\n`;\nrender(\n  <>\n    Api: <Api/>\n    <br/>\n    Api: <Api port="8000"/>\n  </>\n);\n'.trim()}),(0,s.kt)("h3",{id:"attaching-additional-props"},"Attaching additional props"),(0,s.kt)("p",null,"To avoid unnecessary wrappers that just pass on some props to the path,\nyou can use the .withAttrs constructor.\nIt allows you to attach additional props to a path."),(0,s.kt)("p",null,"Furthermore you can also attach more dynamic props to a component.\nThe .withAttrs object also takes functions,\nthat receive the props that the path receives.\nThe return value will be merged into the resulting props as well."),(0,s.kt)("p",null,"Here we render an root path and attach some dynamic and static attributes to it:"),(0,s.kt)("p",null,"This allows each wrapper to override nested uses of .withAttrs.\nRoot's .attrs are applied first, and then Api's .attrs:"),(0,s.kt)(i.v.Card,{scope:{React:p,parsed:o.ZP},code:'\nconst Root = parsed`\n  port: ${props => props.port};\n  root: ${props => props.root};\n`;\nconst Api = Root`api``v1`.withAttrs(props => ({\n  dev: false,\n  port: props.dev? 3000: undefined,\n  root: props.dev? "localhost": "tsei.jp"\n}));\nconst Dev = Api.withAttrs(props => ({dev: false}));\nconst Pro = Api.withAttrs(props => ({dev: true}));\nrender(\n  <>\n    Api: <Api/>\n    <br/>\n    Dev: <Dev/>\n    <br/>\n    Pro: <Pro/>\n  </>\n);\n'.trim()}))}m.isMDXComponent=!0}}]);